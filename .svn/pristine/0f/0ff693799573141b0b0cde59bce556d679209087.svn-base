using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;
using System.Windows.Shapes;

namespace MyScrabble
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        private readonly BoardView boardView;

        public MainWindow()
        {
            InitializeComponent();

            boardView = new BoardView(BoardGrid);

            boardView.DefineGridRowsAndColumns();
            boardView.AddCells();
            boardView.ColorBonusCells();

            InitializeComboBoxes();
            InitializeBoardSideMarkers();
   
        }

        private void InitializeComboBoxes()
        {
            ComboBoxLetters.Items.Add("B");
            ComboBoxLetters.Items.Add("A");
            ComboBoxLetters.Items.Add("C");


            for (int i = 1; i <= boardView.boardSize; i++)
            {
                ComboBoxX.Items.Add(i);
                ComboBoxY.Items.Add(i);
            }
        }

        private void InitializeBoardSideMarkers()
        {
            for (int row = 0; row < boardView.boardSize; row++)
            {
                BoardLeftSideMarksGrid.RowDefinitions.Add(new RowDefinition());
                Label boardSideMarkLabel = CreateBoardSideLabel(row, BoardSide.Left);
                BoardLeftSideMarksGrid.Children.Add(boardSideMarkLabel);


                BoardRightSideMarksGrid.RowDefinitions.Add(new RowDefinition());
                boardSideMarkLabel = CreateBoardSideLabel(row, BoardSide.Right);
                BoardRightSideMarksGrid.Children.Add(boardSideMarkLabel);
            }

            for (int column = 0; column < boardView.boardSize; column++)
            {
                BoardTopSideMarksGrid.ColumnDefinitions.Add(new ColumnDefinition());
                Label boardSideMarkLabel = CreateBoardSideLabel(column, BoardSide.Top);
                BoardTopSideMarksGrid.Children.Add(boardSideMarkLabel);

                BoardBottomSideMarksGrid.ColumnDefinitions.Add(new ColumnDefinition());
                boardSideMarkLabel = CreateBoardSideLabel(column, BoardSide.Bottom);
                BoardBottomSideMarksGrid.Children.Add(boardSideMarkLabel);
            }
        }

        private Label CreateBoardSideLabel(int rowColumn, BoardSide boardSide)
        {
            Label labelToAdd = new Label();
            labelToAdd.FontSize = 15;
            labelToAdd.Foreground = new SolidColorBrush(Colors.White);

            if (boardSide == BoardSide.Left)
            {
                SetVerticalBoardSideLabel(labelToAdd, rowColumn);
                
                labelToAdd.HorizontalAlignment = HorizontalAlignment.Right;
            }
            else if (boardSide == BoardSide.Right)
            {
                SetVerticalBoardSideLabel(labelToAdd, rowColumn);

                labelToAdd.HorizontalAlignment = HorizontalAlignment.Left;
            }
            else if (boardSide == BoardSide.Top)
            {
                SetHorizontalBoardSideLabel(labelToAdd, rowColumn);

                labelToAdd.VerticalAlignment = VerticalAlignment.Bottom;
            }
            else if (boardSide == BoardSide.Bottom)
            {
                SetHorizontalBoardSideLabel(labelToAdd, rowColumn);

                labelToAdd.VerticalAlignment = VerticalAlignment.Top;
            }

            
            return labelToAdd;
        }

        private void SetHorizontalBoardSideLabel(Label labelToAdd, int column)
        {
            labelToAdd.Content = (char)('A' + column);
            Grid.SetColumn(labelToAdd, column);
        }

        private void SetVerticalBoardSideLabel(Label labelToAdd, int row)
        {
            labelToAdd.Content = (row+1).ToString();
            Grid.SetRow(labelToAdd, row);
        }

    }

    enum BoardSide
    {
        Left, Right, Top, Bottom
    }
}
