
using System;
using System.Linq;
using System.Windows;
using System.Collections.Generic;

using MyScrabble.Controller;
using MyScrabble.Controller.Tiles;
using MyScrabble.View;


namespace MyScrabble
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        private TilesBag tilesBag;
        private readonly Player player;

        public MainWindow()
        {
            InitializeComponent();

            BoardView.Initialize(BoardGrid, BoardLeftSideMarksGrid,
                BoardRightSideMarksGrid, BoardTopSideMarksGrid,
                BoardBottomSideMarksGrid);

            BoardView.DefineGridRowsAndColumns();
            BoardView.AddCells();
            BoardView.ColorBonusCells();

            BoardView.InitializeBoardSideMarkers();

            InitializeComboBoxes();

            tilesBag = new TilesBag();
            tilesBag.PopulateWithTiles();

            player = new Player();
        }

        private void InitializeComboBoxes()
        {
            ComboBoxLetters.Items.Add('B');
            ComboBoxLetters.Items.Add('A');
            ComboBoxLetters.Items.Add('C');


            for (int i = 1; i <= Board.boardSize; i++)
            {
                ComboBoxX.Items.Add((char)('A'+i-1));
                ComboBoxY.Items.Add(i);
            }
        }

        private void ButtonPlaceATile_Click(object sender, RoutedEventArgs e)
        {

            List<string> validationMessages = ValidateUsersTileMove();

            if (validationMessages.Count > 0)
            {
                 //I don't exactly get this construct but it looks cool :-)
                string finalValidationMessage = 
                    validationMessages.Aggregate("", (current, validationMessage) => current + (validationMessage + "\n"));

                MessageBox.Show(finalValidationMessage);
            }
            else
            {
                Tile tileToPlaceOnBoard = GetTileToPlaceOnBoard(ComboBoxLetters.SelectedItem);
                int xPositionOnBoard = ComboBoxX.SelectedIndex;
                int yPositionOnBoard = ComboBoxY.SelectedIndex;


                
                Board.placeATile(tileToPlaceOnBoard, xPositionOnBoard, yPositionOnBoard);
            }
   
        }

        private List<string> ValidateUsersTileMove()
        {

            List<string> validationMessages = new List<string>();

            try
            {
                GetTileToPlaceOnBoard(ComboBoxLetters.SelectedItem);
            }
            catch (Exception exception)
            {
                validationMessages.Add(exception.Message);
            }


            int xPositionOnBoard = ComboBoxX.SelectedIndex;

            if (xPositionOnBoard == -1)
            {
                validationMessages.Add("X position for the tile was not selected");
            }


            int yPositionOnBoard = ComboBoxY.SelectedIndex;

            if (yPositionOnBoard == -1)
            {
                validationMessages.Add("Y position for the tile was not selected");
            }

            return validationMessages;
        }

        public static Tile GetTileToPlaceOnBoard(object rawSelectedLetter)
        {
            if (rawSelectedLetter == null)
            {
                throw new Exception("Tile to be placed on the board was not selected");
            }

            char tileLetter = (char)rawSelectedLetter;

            switch (tileLetter)
            {
                case 'A':
                    return new TileA();
                case 'B':
                    return new TileB();
                case 'C':
                    return new TileC();
                default:
                    throw new Exception("Tile to be placed on the board is incorrect");

                //TODO: include all letters
            }
        }

    }
}
